{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2674232,"sourceType":"datasetVersion","datasetId":1627144}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"### **Brain Tumor Detection on YOLOvX App**","metadata":{}},{"cell_type":"markdown","source":"In this experiment, we present Brain Tumor - Object Detection using YOLOv9s from @ultralytics, trained on a dataset from Kaggle, with the model shared and deployed on YOLOvX. ðŸš€","metadata":{}},{"cell_type":"markdown","source":"### Install necessary packages","metadata":{}},{"cell_type":"code","source":"!pip install ultralytics\n!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu117","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Check GPU Availability","metadata":{}},{"cell_type":"markdown","source":"Make sure that we have access to GPU. We can use nvidia-smi command to do that. In case of any problems navigate to Edit -> Notebook settings -> Hardware accelerator, set it to GPU, and then click Save.","metadata":{}},{"cell_type":"code","source":"!nvidia-smi","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Check GPU availability and PyTorch version","metadata":{}},{"cell_type":"code","source":"import torch\n\n# Check the version of PyTorch and if CUDA is available\nprint(\"PyTorch version:\", torch.__version__)\nprint(\"CUDA available:\", torch.cuda.is_available())","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Import libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport cv2\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom ultralytics import YOLO\nimport os\nimport shutil\nimport random\nimport torch\nfrom IPython.display import Image\n\n# Set the CUDA device to GPU 0 if available\nif torch.cuda.is_available():\n    torch.cuda.set_device(0)  # Optional: sets the active GPU (if you have multiple)\n    device = torch.device(\"cuda\")\nelse:\n    device = torch.device(\"cpu\")\n\nprint(f\"Using device: {device}\")\n\n# Load the YOLO model and move it to the chosen device (GPU or CPU)\nmodel = YOLO('/kaggle/input/yolo-weights/yolov9s.pt', task='detect').to(device)\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Managing Files","metadata":{}},{"cell_type":"code","source":"#clear and recreate dataset folders\nif os.path.exists('dataset'):\n    shutil.rmtree('dataset')\n\nos.makedirs('dataset/images/train')\nos.makedirs('dataset/labels/train')\nos.makedirs('dataset/images/test')\nos.makedirs('dataset/labels/test')\n\n#copy files from different data sources\ndata_folders = {\n    'axial_t1wce_2_class',\n    'coronal_t1wce_2_class',\n    'sagittal_t1wce_2_class'\n}\n\nfor folder in data_folders:\n    images_train_path = f'/kaggle/input/brain-tumor-object-detection-datasets/{folder}/images/train'\n    labels_train_path = f'/kaggle/input/brain-tumor-object-detection-datasets/{folder}/labels/train'\n    images_test_path = f'/kaggle/input/brain-tumor-object-detection-datasets/{folder}/images/test'\n    labels_test_path = f'/kaggle/input/brain-tumor-object-detection-datasets/{folder}/labels/test'\n\n    #copy the labels and images if the images have a label\n    images_train_files = os.listdir(images_train_path)\n    for file in images_train_files:\n        filename = os.path.splitext(file)[0]\n        label_file_path = os.path.join(labels_train_path, f'{filename}.txt')\n        if os.path.exists(label_file_path):\n            shutil.copy(os.path.join(images_train_path, f'{filename}.jpg'),\n                        os.path.join('dataset/images/train',f'{filename}.jpg'))\n            shutil.copy(label_file_path,\n                        os.path.join('dataset/labels/train',f'{filename}.txt'))\n            \n    images_test_files = os.listdir(images_test_path)\n    for file in images_test_files:\n        filename = os.path.splitext(file)[0]\n        label_file_path = os.path.join(labels_test_path, f'{filename}.txt')\n        if os.path.exists(label_file_path):\n            shutil.copy(os.path.join(images_test_path, f'{filename}.jpg'),\n                        os.path.join('dataset/images/test',f'{filename}.jpg'))\n            shutil.copy(label_file_path,\n                        os.path.join('dataset/labels/test',f'{filename}.txt'))\n            ","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Visualization","metadata":{}},{"cell_type":"code","source":"\n#function to display images\ndef display_images(image_dir, num_images=9):\n    images = os.listdir(image_dir)\n    sample_images = random.sample(images, num_images)\n    plt.figure(figsize=(15,15))\n    for i, image_name in enumerate(sample_images):\n        image_path = os.path.join(image_dir, image_name)\n        img = cv2.imread(image_path)\n        #if it its rgb foto\n        #img_rgb = cv2cvtColor(img, cv2.COLOR_BGR2RGB)\n        #if it is grayscale\n        img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n        plt.subplot(3, 3, i + 1)\n        plt.imshow(img, cmap='gray')\n        plt.axis('off')\n    plt.show()\n\nprint(\"Displaying some training images :\")\ndisplay_images(os.path.join('dataset', 'images/train'))","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_images = os.listdir('dataset/images/train')\ntest_images = os.listdir('dataset/images/test')\ntrain_labels = os.listdir('dataset/labels/train')\ntest_labels = os.listdir('dataset/labels/test')\n\n\nnum_train_images = len(train_images)\nnum_test_images = len(test_images)\nnum_train_labels = len(train_labels)\nnum_test_labels = len(test_labels)\n\n\nprint(\"number of images at train: \",num_train_images)\nprint(\"number of labels at train: \",num_train_labels)\nprint(\"number of images at test: \",num_test_images)\nprint(\"number of labels at test: \",num_test_labels)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Split the dataset into training and validation","metadata":{}},{"cell_type":"code","source":"def move_files(source_dir, target_dir, file_list):\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    for file in file_list:\n        source_path = os.path.join(source_dir, file)\n        target_path = os.path.join(target_dir, file)\n        shutil.move(source_path, target_path)\ndef count_files(image_dir, label_dir):\n    num_images = len(os.listdir(image_dir))\n    num_labels = len(os.listdir(label_dir))\n    return num_images, num_labels\n\ntrain_images_path = 'dataset/images/train'\ntrain_labels_path = 'dataset/labels/train'\n\ntrain_images = os.listdir(train_images_path)\n\nval_split = int(len(train_images)*0.2)\nval_images = random.sample(train_images, val_split)\n\nval_images_path = 'dataset/images/val'\nval_labels_path = 'dataset/labels/val'\n\nmove_files(train_images_path, val_images_path, val_images)\n\nval_labels = [os.path.splitext(image)[0] + '.txt' for image in val_images]\n\nmove_files(train_labels_path, val_labels_path, val_labels)\n\nnum_train_images, num_train_labels = count_files(train_images_path, train_labels_path)\nprint(f\"number of images at train after split: {num_train_images}\")\nprint(f\"number of labels at train after split: {num_train_labels}\")\n\nnum_val_images, num_val_labels = count_files(val_images_path, val_labels_path)\nprint(f\"number of images at val after split: {num_val_images}\")\nprint(f\"number of labels at val after split: {num_val_labels}\")","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Create the YAML configuration file","metadata":{}},{"cell_type":"code","source":"text = \"\"\"\npath: /kaggle/working/dataset\ntrain: images/train\nval: images/val\n\n# Classes\nnc: 2\nnames: ['negative','positive']\n\"\"\"\nwith open(\"dataset/fixed_path.yaml\", 'w') as file:\n    file.write(text)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Training","metadata":{}},{"cell_type":"code","source":"# Define paths\nyaml_file = f'dataset/fixed_path.yaml'\n\n# Load the YOLO model (use the correct model version/path)\nmodel = YOLO('yolov9s.pt')\n\n# Train the model\nresults = model.train(data=yaml_file, epochs=100, imgsz=640, batch=4, plots=True)\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Results","metadata":{}},{"cell_type":"code","source":"Image(filename=f'runs/detect/train/confusion_matrix.png')","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Image(filename=f'runs/detect/train/results.png')","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Evaluate the Model","metadata":{}},{"cell_type":"code","source":"# Path to your trained model and test images directory\nmodel_v1_path = 'runs/detect/train/weights/best.pt'\ntest_images_dir = 'dataset/images/test'\n\n# Load the YOLO model\nmodel_v1 = YOLO(model_v1_path)\n\n# Function to display results\ndef display_results(model, img_dir, num_images=5):\n    images = os.listdir(img_dir)  # List all images in the directory\n    sample_images = random.sample(images, num_images)  # Randomly select a few images\n    save_dir = 'runs/detect/exp'  # Directory to save the results\n    os.makedirs(save_dir, exist_ok=True)  # Create the directory if it doesn't exist\n\n    for image_name in sample_images:\n        image_path = os.path.join(img_dir, image_name)  # Full path to the image\n        results = model(image_path)  # Run the model on the image\n\n        for result in results:\n            # Save the result image with bounding boxes\n            result.plot(save=True, filename=os.path.join(save_dir, os.path.basename(result.path)))\n            result_image_path = os.path.join(save_dir, os.path.basename(result.path))\n            display(Image(filename=result_image_path))  # Display the result image\n\n# Display test images with detections\nprint(\"Displaying results from the brain tumor detection model:\")\ndisplay_results(model_v1, test_images_dir)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Validate the Model","metadata":{}},{"cell_type":"code","source":"\n# Define the path to the trained model's weights\nweights_path = 'runs/detect/train/weights/best.pt'\n\n# Check if the weights file exists before running the YOLO validation command\nif os.path.exists(weights_path):\n    # Run YOLO validation using the model and dataset paths\n    !yolo task=detect mode=val model={weights_path} data=dataset/fixed_path.yaml\nelse:\n    # Print an error message if the weights file is not found\n    print(f\"Weights file not found at {weights_path}. Please check the training process or path.\")","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Deploying the Custom Model on YOLOvX App for Real-time Inference\nOnce you are satisfied with the model performance you can now simply download the model from Output directory and upload it to the YOLOvX App. Now simply RUN","metadata":{}},{"cell_type":"markdown","source":"### Now we can go back to:\n","metadata":{}},{"cell_type":"markdown","source":"https://community.yolovx.com/t/experiment-3-brain-tumor-detection-on-yolovx-app/50/2","metadata":{}},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null}]}