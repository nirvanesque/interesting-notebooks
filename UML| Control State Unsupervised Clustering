{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":33107,"databundleVersionId":3943986,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# <center style=\"font-family: consolas; font-size: 32px; font-weight: bold;\">Unsupervised Machine Learning Clustering </center>\n<p><center style=\"color:#949494; font-family: consolas; font-size: 20px;\">Playground Series July 2022</center></p>\n\n***\n\n# <center style=\"font-family: consolas; font-size: 32px; font-weight: bold;\"> EDA + Clustering Techniques + Silhoutte Score\n# <center style=\"font-family: consolas; font-size: 32px; font-weight: bold;\">Silhoutte Score 0.0318 \n","metadata":{}},{"cell_type":"markdown","source":"<p style=\"font-family: Arial, sans-serif; font-weight: bold; letter-spacing: 2px; color: #4B0082; font-size: 150%; text-align: left; padding: 0px; border-bottom: 3px solid #FFD700\">ü§ñ Unsupervised Machine learning Clustering on Control State </p>\n\n![image2](https://storage.googleapis.com/kaggle-media/competitions/Tabular%20Playground/laura-rivera-ArH3dtoDQc0-unsplash.jpg)\n\n<p style=\"font-family: Arial, sans-serif; font-weight: bold; letter-spacing: 2px; color: #000000; font-size: 150%; text-align: left; padding: 0px; border-bottom: 3px solid #FFD700\">\n## Welcome to Kaggle's first ever unsupervised clustering challenge!\n<div style=\"padding: 15px; background-color: #FFFFFF; font-size: 100%; text-align: left; color: #000000;\">\n<br>   \n\n#### In this challenge, you are given a dataset where each row belongs to a particular cluster. Your job is to predict the cluster each row belongs to. You are not given any training data, and you are not told how many clusters are found in the ground truth labels.\n\n### This dataset was in a Kaggle Competition, of playground series 2022, the features don't make inherent sense, it is done to simulate real-world environment. It was recommended me to be by Ravi (Kaggle Grandmaster, top 1 global in discussion) for my analysis in the ese for unsupervised machine learning lab.\n</div>\n","metadata":{}},{"cell_type":"markdown","source":"### <p style=\"font-family:Arial, sans-serif; font-weight:bold; letter-spacing: 2px; color:#4B0082; font-size:150%; text-align:left;padding: 0px; border-bottom: 3px solid #FFD700\"> Imports </p>\n","metadata":{}},{"cell_type":"markdown","source":"### Auto EDA Tool Imports","metadata":{}},{"cell_type":"code","source":"!pip install summarytools   \n!pip install dataprep","metadata":{"scrolled":true,"_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-05-01T14:53:42.229626Z","iopub.execute_input":"2024-05-01T14:53:42.230009Z","iopub.status.idle":"2024-05-01T14:54:58.647139Z","shell.execute_reply.started":"2024-05-01T14:53:42.22998Z","shell.execute_reply":"2024-05-01T14:54:58.645849Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Utility\nimport numpy as np\nimport pandas as pd\n\n#EDA\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#from summarytools import dfSummary\n#from dataprep.eda import create_report\n\n#PReprocessing\nimport missingno\nfrom sklearn.preprocessing import StandardScaler, PowerTransformer, RobustScaler\nfrom scipy.stats import shapiro\nfrom termcolor import colored\n\n\nimport umap\nfrom sklearn.manifold import TSNE\n\n#Clustering Methods\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom sklearn.mixture import BayesianGaussianMixture\nfrom sklearn.cluster import AgglomerativeClustering\nfrom scipy.cluster.hierarchy import dendrogram, linkage\n\n\nfrom sklearn.metrics import silhouette_score, silhouette_samples\nfrom matplotlib import cm","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-01T17:13:21.697175Z","iopub.execute_input":"2024-05-01T17:13:21.697611Z","iopub.status.idle":"2024-05-01T17:13:21.706647Z","shell.execute_reply.started":"2024-05-01T17:13:21.697577Z","shell.execute_reply":"2024-05-01T17:13:21.705481Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import warnings\n\nwarnings.simplefilter('ignore', category=FutureWarning)  # Suppressing the FutureWarning globally\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning) # Suppressing FutureWarning globally","metadata":{"execution":{"iopub.status.busy":"2024-05-01T14:57:58.396072Z","iopub.execute_input":"2024-05-01T14:57:58.397536Z","iopub.status.idle":"2024-05-01T14:57:58.402707Z","shell.execute_reply.started":"2024-05-01T14:57:58.397492Z","shell.execute_reply":"2024-05-01T14:57:58.401542Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"workstate_df = pd.read_csv(\"/kaggle/input/tabular-playground-series-jul-2022/data.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:55:52.396479Z","iopub.execute_input":"2024-05-01T16:55:52.39809Z","iopub.status.idle":"2024-05-01T16:55:53.785647Z","shell.execute_reply.started":"2024-05-01T16:55:52.398053Z","shell.execute_reply":"2024-05-01T16:55:53.784701Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"workstate_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-01T14:58:00.625886Z","iopub.execute_input":"2024-05-01T14:58:00.626233Z","iopub.status.idle":"2024-05-01T14:58:00.653137Z","shell.execute_reply.started":"2024-05-01T14:58:00.626202Z","shell.execute_reply":"2024-05-01T14:58:00.651877Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### <p style=\"font-family:Arial, sans-serif; font-weight:bold; letter-spacing: 2px; color:#4B0082; font-size:150%; text-align:left;padding: 0px; border-bottom: 3px solid #FFD700\">üõ†Ô∏è EDA </p>\n","metadata":{}},{"cell_type":"code","source":"dfSummary(workstate_df)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T14:58:00.654686Z","iopub.execute_input":"2024-05-01T14:58:00.65536Z","iopub.status.idle":"2024-05-01T14:58:04.524475Z","shell.execute_reply.started":"2024-05-01T14:58:00.655327Z","shell.execute_reply":"2024-05-01T14:58:04.522937Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"missingno.matrix(workstate_df)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T14:58:04.526464Z","iopub.execute_input":"2024-05-01T14:58:04.526977Z","iopub.status.idle":"2024-05-01T14:58:06.187169Z","shell.execute_reply.started":"2024-05-01T14:58:04.526946Z","shell.execute_reply":"2024-05-01T14:58:06.186302Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"workstate_df[np.isinf(workstate_df)] = np.nan","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:55:53.786824Z","iopub.execute_input":"2024-05-01T16:55:53.78782Z","iopub.status.idle":"2024-05-01T16:55:53.809341Z","shell.execute_reply.started":"2024-05-01T16:55:53.78779Z","shell.execute_reply":"2024-05-01T16:55:53.808328Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\ncreate_report(workstate_df)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T14:58:06.207103Z","iopub.execute_input":"2024-05-01T14:58:06.207755Z","iopub.status.idle":"2024-05-01T14:58:45.412271Z","shell.execute_reply.started":"2024-05-01T14:58:06.207708Z","shell.execute_reply":"2024-05-01T14:58:45.411105Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# EDA Insights\n\n### - There are **No missing values.**\n### - Much of data seems normally distributed, we will do p-test later to confirm this.\n### - We can also check this my checking the QQ plots given by the auto EDA\n### - There also seem varibles which are discrete in format\n### - And some variables which follow poisson distribution","metadata":{}},{"cell_type":"code","source":"def plot_distribution(df, solid=True, palette='viridis'):\n    '''\n    This function will take the dataframe, \n    and plot kde plots across subplots. \n    One can set the option to toggle solid plots on/off,\n    choose color palettes.\n    '''\n    # Setting the style and palette\n    sns.set(style=\"whitegrid\")\n    sns.set_palette(palette)\n    \n    features = df.columns               \n    num_features = len(features)      #get the no. of columns\n    \n   \n    num_cols = 3                                 # Setting the number of coluns in subplot\n    num_rows = num_features // num_cols + (num_features % num_cols > 0)         #number of rows\n    \n    fig, axes = plt.subplots(num_rows, num_cols, figsize=(10, 2*num_rows))       # Creating the subplots accordinlgy\n    \n    if num_rows > 1:\n        axes = axes.flatten()         # Flattening the axes if multiple rows \n    else:\n        axes = [axes]\n    \n    for i, feature in enumerate(features):       # Looping thro gh each feature and plotting KDE\n        ax = axes[i]\n        if solid:\n            sns.kdeplot(df[feature], ax=ax, fill=True)       #making the kdeplot, filled, TRUE by defult\n        else:\n            sns.kdeplot(df[feature], ax=ax, fill=False)      #empty \n        ax.set_title(f'Distribution of {feature}')\n        ax.set_xlabel('')\n        ax.set_ylabel('Density')\n    \n    plt.tight_layout()           # To adjust the subplots\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-01T14:58:45.413867Z","iopub.execute_input":"2024-05-01T14:58:45.414207Z","iopub.status.idle":"2024-05-01T14:58:45.423662Z","shell.execute_reply.started":"2024-05-01T14:58:45.414177Z","shell.execute_reply":"2024-05-01T14:58:45.422426Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\nplot_distribution(workstate_df, solid= True, palette= 'viridis')","metadata":{"execution":{"iopub.status.busy":"2024-05-01T14:58:45.425696Z","iopub.execute_input":"2024-05-01T14:58:45.426175Z","iopub.status.idle":"2024-05-01T14:59:07.975563Z","shell.execute_reply.started":"2024-05-01T14:58:45.426144Z","shell.execute_reply":"2024-05-01T14:59:07.974441Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_pair(df_train,num_var,plotname):\n    '''\n    Funtion to make a pairplot:\n    df_train: total data\n    num_var: a list of numeric variable\n    target: target variable\n    '''\n    g = sns.pairplot(data=df_train, x_vars=num_var, y_vars=num_var, corner=True)\n    plt.suptitle(plotname, ha='center', fontweight='bold', fontsize=25, y=0.98)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-01T14:59:07.976728Z","iopub.execute_input":"2024-05-01T14:59:07.977061Z","iopub.status.idle":"2024-05-01T14:59:07.984277Z","shell.execute_reply.started":"2024-05-01T14:59:07.977034Z","shell.execute_reply":"2024-05-01T14:59:07.98303Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"num_var = workstate_df.columns.tolist()\nnum_var.remove(\"id\")","metadata":{"execution":{"iopub.status.busy":"2024-05-01T14:59:07.988151Z","iopub.execute_input":"2024-05-01T14:59:07.988528Z","iopub.status.idle":"2024-05-01T14:59:07.999632Z","shell.execute_reply.started":"2024-05-01T14:59:07.988499Z","shell.execute_reply":"2024-05-01T14:59:07.998576Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\nplot_pair(workstate_df,num_var,\"Scatter Pair and Distribution Plot\")","metadata":{"execution":{"iopub.status.busy":"2024-05-01T14:59:08.001058Z","iopub.execute_input":"2024-05-01T14:59:08.001928Z","iopub.status.idle":"2024-05-01T15:03:57.801496Z","shell.execute_reply.started":"2024-05-01T14:59:08.001886Z","shell.execute_reply":"2024-05-01T15:03:57.800038Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"CPU times: user 6min 12s, sys: 980 ms, total: 6min 13s\nWall time: 6min 13s","metadata":{}},{"cell_type":"markdown","source":"### <p style=\"font-family:Arial, sans-serif; font-weight:bold; letter-spacing: 2px; color:#4B0082; font-size:150%; text-align:left;padding: 0px; border-bottom: 3px solid #FFD700\">üî¢ Preprocessing </p>\n","metadata":{}},{"cell_type":"markdown","source":"### To check if our column follow a stand deviation or not, we perform a p test with condidence interval 0.05, we are doing this as many of our features look like they are normally distributed.","metadata":{}},{"cell_type":"code","source":"# We don't care about `id` feature column information\nfor col in workstate_df.columns[1:]:\n    stat, p_value = shapiro(workstate_df[col])  \n    alpha = 0.05\n    if p_value > alpha: \n        result = colored('Accepted', 'green')  \n    else:\n        result = colored('Rejected','red')        \n    print('Feature: {}\\t Hypothesis: {}'.format(col, result))","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:03:57.803409Z","iopub.execute_input":"2024-05-01T15:03:57.803734Z","iopub.status.idle":"2024-05-01T15:03:58.119855Z","shell.execute_reply.started":"2024-05-01T15:03:57.803708Z","shell.execute_reply":"2024-05-01T15:03:58.118542Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Scaling the data because we are going to perform uml algorithms on it.","metadata":{}},{"cell_type":"code","source":"scaler = StandardScaler()\nscaled_data = pd.DataFrame(scaler.fit_transform(workstate_df))","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:56:26.199822Z","iopub.execute_input":"2024-05-01T16:56:26.20022Z","iopub.status.idle":"2024-05-01T16:56:26.286081Z","shell.execute_reply.started":"2024-05-01T16:56:26.20019Z","shell.execute_reply":"2024-05-01T16:56:26.28503Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Checking for how many clusters:","metadata":{}},{"cell_type":"code","source":"# Instantiate the clustering model and visualizer\nmodel = KMeans()\nvisualizer = KElbowVisualizer(model, k=(4,12))\n\nvisualizer.fit(scaled_data)        # Fit the data to the visualizer\nvisualizer.show()        # Finalize and render the figure","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:03:58.182109Z","iopub.execute_input":"2024-05-01T15:03:58.182455Z","iopub.status.idle":"2024-05-01T15:04:47.333122Z","shell.execute_reply.started":"2024-05-01T15:03:58.182425Z","shell.execute_reply":"2024-05-01T15:04:47.332051Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## K = 7, gave best results, checking with silhoutte score","metadata":{}},{"cell_type":"code","source":"import sklearn.metrics as metrics\nfor i in range(4,15):\n    labels=KMeans(n_clusters=i,init=\"k-means++\",random_state=200).fit(scaled_data).labels_\n    print (\"Silhouette score for k(clusters) = \"+str(i)+\" is \"\n           +str(metrics.silhouette_score(scaled_data,labels,metric=\"euclidean\",sample_size=1000,random_state=200)))","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:04:47.334626Z","iopub.execute_input":"2024-05-01T15:04:47.334946Z","iopub.status.idle":"2024-05-01T15:06:11.470935Z","shell.execute_reply.started":"2024-05-01T15:04:47.33492Z","shell.execute_reply":"2024-05-01T15:06:11.469676Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def evaluate_results(X):\n    '''Plots the results'''\n    silhouette_scores = []\n    k_values = range(2, 11)  \n    \n    for k in k_values:\n        kmeans = KMeans(n_clusters=k)\n        cluster_labels = kmeans.fit_predict(X)\n        silhouette_avg = silhouette_score(X, cluster_labels)\n        silhouette_scores.append(silhouette_avg)\n        \n    # Plot the silhouette scores\n    plt.plot(k_values, silhouette_scores, marker='o')\n    plt.xlabel('Number of clusters (k)')\n    plt.ylabel('Silhouette Score')\n    plt.title('Silhouette Plot')\n    plt.grid(True)\n    plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:06:11.477935Z","iopub.execute_input":"2024-05-01T15:06:11.479055Z","iopub.status.idle":"2024-05-01T15:06:11.494089Z","shell.execute_reply.started":"2024-05-01T15:06:11.478999Z","shell.execute_reply":"2024-05-01T15:06:11.492391Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"evaluate_results(scaled_data)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:06:11.500473Z","iopub.execute_input":"2024-05-01T15:06:11.501185Z","iopub.status.idle":"2024-05-01T15:25:52.705122Z","shell.execute_reply.started":"2024-05-01T15:06:11.501135Z","shell.execute_reply":"2024-05-01T15:25:52.703826Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_silhouette_analysis(X, range_n_clusters):\n    '''This code is taken form sklearn documentation about silhouette score, \n    but modidied to only have silhoutte plot'''\n    for n_clusters in range_n_clusters:\n        fig, ax1 = plt.subplots()\n        fig.set_size_inches(9, 7)\n\n        ax1.set_xlim([-0.1, 1])\n        ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n        clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n        cluster_labels = clusterer.fit_predict(X)\n\n        silhouette_avg = silhouette_score(X, cluster_labels)\n        print(f\"For n_clusters = {n_clusters}, the average silhouette_score is : {silhouette_avg}\")\n\n        sample_silhouette_values = silhouette_samples(X, cluster_labels)\n\n        y_lower = 10\n        for i in range(n_clusters):\n            ith_cluster_silhouette_values = sample_silhouette_values[cluster_labels == i]\n            ith_cluster_silhouette_values.sort()\n            size_cluster_i = ith_cluster_silhouette_values.shape[0]\n            y_upper = y_lower + size_cluster_i\n            color = cm.nipy_spectral(float(i) / n_clusters)\n            ax1.fill_betweenx(\n                np.arange(y_lower, y_upper),\n                0,\n                ith_cluster_silhouette_values,\n                facecolor=color,\n                edgecolor=color,\n                alpha=0.7,\n            )\n            ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n            y_lower = y_upper + 10\n\n        ax1.set_title(\"The silhouette plot for the various clusters\")\n        ax1.set_xlabel(\"The silhouette coefficient values\")\n        ax1.set_ylabel(\"Cluster label\")\n        ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n        ax1.set_yticks([])\n        ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n        plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:25:52.707003Z","iopub.execute_input":"2024-05-01T15:25:52.709823Z","iopub.status.idle":"2024-05-01T15:25:52.722441Z","shell.execute_reply.started":"2024-05-01T15:25:52.709775Z","shell.execute_reply":"2024-05-01T15:25:52.721045Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_silhouette_analysis(scaled_data, [5,6,7,8,9,10,11,12,13])","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:25:52.724097Z","iopub.execute_input":"2024-05-01T15:25:52.724569Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### We verified from silhouetter score that the K value = 7, is giving best clusters, we will contiue with that.","metadata":{}},{"cell_type":"code","source":"%%time\nmodel = KMeans(n_clusters = 7)\npreds = model.fit_predict(scaled_data)\ndf_with_label = scaled_data.copy()","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:57:02.387702Z","iopub.execute_input":"2024-05-01T16:57:02.388131Z","iopub.status.idle":"2024-05-01T16:57:09.400514Z","shell.execute_reply.started":"2024-05-01T16:57:02.388104Z","shell.execute_reply":"2024-05-01T16:57:09.399354Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Final Prediction by KMeans","metadata":{}},{"cell_type":"code","source":"  silhouette_score_Kmeans_final = silhouette_score(scaled_data, preds)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T17:03:14.410704Z","iopub.execute_input":"2024-05-01T17:03:14.411098Z","iopub.status.idle":"2024-05-01T17:05:09.488169Z","shell.execute_reply.started":"2024-05-01T17:03:14.411069Z","shell.execute_reply":"2024-05-01T17:05:09.487042Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f\"The final submission from Kmeans is giving Silhoutte Score of: {silhouette_score_Kmeans_final}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The final submission from Kmeans is giving Silhoutte Score of: 0.03182691926834927","metadata":{}},{"cell_type":"code","source":"um = umap.UMAP(n_components=2)\nX = scaled_data.copy()\ncomponents_umap = um.fit_transform(X)\nprojection_2d = pd.DataFrame({\"x\" : components_umap[:,0], \"y\" : components_umap[:,1], \"clusters\" : preds})","metadata":{"execution":{"iopub.status.busy":"2024-05-01T17:09:19.735027Z","iopub.execute_input":"2024-05-01T17:09:19.735467Z","iopub.status.idle":"2024-05-01T17:10:57.890054Z","shell.execute_reply.started":"2024-05-01T17:09:19.735435Z","shell.execute_reply":"2024-05-01T17:10:57.888721Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"projection_2d.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-01T17:10:57.892164Z","iopub.execute_input":"2024-05-01T17:10:57.892511Z","iopub.status.idle":"2024-05-01T17:10:57.909142Z","shell.execute_reply.started":"2024-05-01T17:10:57.892483Z","shell.execute_reply":"2024-05-01T17:10:57.908319Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# UMAP for Projection","metadata":{}},{"cell_type":"code","source":"plt.figure()\nsns.scatterplot(data = projection_2d, x = 'x', y = 'y', hue = 'clusters', palette = 'tab20')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-01T17:10:57.9105Z","iopub.execute_input":"2024-05-01T17:10:57.910942Z","iopub.status.idle":"2024-05-01T17:11:06.053761Z","shell.execute_reply.started":"2024-05-01T17:10:57.910909Z","shell.execute_reply":"2024-05-01T17:11:06.052493Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# UMAP insights\n### As the Projection are Convex in nature, DBSCAN won't be of much help., We used UMAP because Tsne was taking large computation and time.","metadata":{}},{"cell_type":"code","source":"df_with_label[\"clusters\"] = preds","metadata":{"execution":{"iopub.status.busy":"2024-05-01T17:11:26.302972Z","iopub.execute_input":"2024-05-01T17:11:26.303976Z","iopub.status.idle":"2024-05-01T17:11:26.309549Z","shell.execute_reply.started":"2024-05-01T17:11:26.303938Z","shell.execute_reply":"2024-05-01T17:11:26.308489Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Plotting with labels to check wheather the distribution is guassian with the labels provided by KMeans","metadata":{}},{"cell_type":"code","source":"%%time\nfig, axes = plt.subplots(nrows=5, ncols=6, figsize=(22, 12))\nfor i, col in enumerate(df_with_label.columns[:-1]): \n    sns.kdeplot(data=df_with_label, x=col, hue='clusters', palette='tab20', ax=axes[(i // 6)][(i % 6)])\n\n#fig.tight_layout(h_pad=1.0, w_pad=0.5)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T17:11:27.112498Z","iopub.execute_input":"2024-05-01T17:11:27.11291Z","iopub.status.idle":"2024-05-01T17:12:06.167464Z","shell.execute_reply.started":"2024-05-01T17:11:27.112877Z","shell.execute_reply":"2024-05-01T17:12:06.166296Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## The data after labeling with KMeans prediction seems a fit for Guassian Mixture Model. As almost all the labels follow a normal distribution, and further more, we will use power transform for converting our distribution further to Normal distribution","metadata":{}},{"cell_type":"code","source":"scaled_data = pd.DataFrame(PowerTransformer(method=\"yeo-johnson\").fit_transform(workstate_df.loc[:,'f_00':])) #yeo-johnson to make it normal\nscaled_data.columns = workstate_df.columns[1:]\nscaled_data = pd.DataFrame(RobustScaler().fit_transform(scaled_data))  # to be robust to outliers\nscaled_data.columns = workstate_df.columns[1:]","metadata":{"execution":{"iopub.status.busy":"2024-05-01T17:12:13.397499Z","iopub.execute_input":"2024-05-01T17:12:13.398025Z","iopub.status.idle":"2024-05-01T17:12:17.095205Z","shell.execute_reply.started":"2024-05-01T17:12:13.397981Z","shell.execute_reply":"2024-05-01T17:12:17.094298Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- If we check for these scaled data, they will be clearly normally distrubuted, as we have applied PowerTransformation which makes the data like normal distrubtiion ","metadata":{}},{"cell_type":"markdown","source":"# Guassian Mixture Model","metadata":{}},{"cell_type":"code","source":"model = BayesianGaussianMixture(n_components=7,covariance_type='full')\npreds = model.fit_predict(scaled_data)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T17:13:35.572147Z","iopub.execute_input":"2024-05-01T17:13:35.572535Z","iopub.status.idle":"2024-05-01T17:14:43.610394Z","shell.execute_reply.started":"2024-05-01T17:13:35.572508Z","shell.execute_reply":"2024-05-01T17:14:43.60877Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"silhouette_score_Guassian_final = silhouette_score(scaled_data, preds)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T17:15:53.670053Z","iopub.execute_input":"2024-05-01T17:15:53.670472Z","iopub.status.idle":"2024-05-01T17:17:49.947993Z","shell.execute_reply.started":"2024-05-01T17:15:53.670442Z","shell.execute_reply":"2024-05-01T17:17:49.946678Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f\"The final submission from Guassian Mixture Model is giving Silhoutte Score of: {silhouette_score_Guassian_final}\")","metadata":{"execution":{"iopub.status.busy":"2024-05-01T17:17:49.950642Z","iopub.execute_input":"2024-05-01T17:17:49.951805Z","iopub.status.idle":"2024-05-01T17:17:49.957881Z","shell.execute_reply.started":"2024-05-01T17:17:49.951749Z","shell.execute_reply":"2024-05-01T17:17:49.956585Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Using Agglomerative Techniques can also be benefitial, as we don't know the how many possible possible classes are there, but, its taking alot of memory and crashing the notebook, so due to lack of computational power, we will not perform this.","metadata":{}},{"cell_type":"code","source":"# plt.figure(figsize=(12, 6))\n# dendrogram(linkage(scaled_data, method='ward'))\n# plt.title('Dendrogram')\n# plt.xlabel('Features')\n# plt.ylabel('Euclidean Distances')\n# plt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Thank You\n## Upvote if you find helpful.","metadata":{}}]}