{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":4130910,"sourceType":"datasetVersion","datasetId":2440665}],"dockerImageVersionId":30648,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Eye diseases","metadata":{}},{"cell_type":"markdown","source":"Diabetes is a condition that carries an increased risk of developing eye complications. Diabetic eye disease includes complications such as diabetic retinopathy, cataracts and glaucoma.\n\nDiabetes is the leading cause of blindness in working-age adults. People with type 1 and type 2 diabetes are at risk. It’s possible to be unaware that you have severe diabetic eye disease and suddenly go blind. Fortunately, most cases of blindness can be prevented with regular eye examinations and proper care.\n\n- The dataset consists of Normal, Diabetic Retinopathy, Cataract and Glaucoma retinal images where each class have approximately 1000 images. These images are collected from various sorces like IDRiD, Oculur recognition, HRF etc.\n\n- Diabetic retinopathy: The persistently high blood sugar levels that occur with diabetes can damage the retina’s small blood vessels (capillaries), which deliver oxygen and nutrients. Diabetic retinopathy affects up to a third of people with diabetes over the age of 502.\n\n- Cataracts: A cataract is a clouding of the lens in the eye. Left untreated, cataracts can eventually lead to blindness. People with diabetes are more likely to develop cataracts at an earlier age and suffer visual impairment faster than those without the condition.1,3\n\n- Glaucoma: This is a group of conditions that can damage the optic nerve. The optic nerve transmits signals from the retina to the brain for processing. Glaucoma is often (but not always) a result of increased pressure inside the eye. The risk of glaucoma in people with diabetes is significantly higher than that of the general population.1,4 The two main types are open-angle glaucoma (also called ‘the sneak thief of sight’) and angle-closure glaucoma (this comes on suddenly and is a medical emergency).","metadata":{}},{"cell_type":"markdown","source":"## Import Libraries","metadata":{}},{"cell_type":"code","source":"# import system libs\nimport os\nimport time\n# import data handling tools\nimport cv2\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report, f1_score\n# import Deep learning Libraries\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Flatten, Dense, Activation, GlobalAveragePooling2D\n# Ignore Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2024-02-15T13:33:46.288741Z","iopub.execute_input":"2024-02-15T13:33:46.289613Z","iopub.status.idle":"2024-02-15T13:34:00.71917Z","shell.execute_reply.started":"2024-02-15T13:33:46.289578Z","shell.execute_reply":"2024-02-15T13:34:00.718351Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Class for Loading and Splitting Datasets","metadata":{}},{"cell_type":"code","source":"class EyeDiseaseDataset:\n    def __init__(self, dataDir):\n        self.data_dir = dataDir\n   \n    def dataPaths(self):\n        filepaths = []\n        labels = []\n        folds = os.listdir(self.data_dir)\n        for fold in folds:\n            foldPath = os.path.join(self.data_dir, fold)\n            filelist = os.listdir(foldPath)\n            for file in filelist:\n                fpath = os.path.join(foldPath, file)\n                filepaths.append(fpath)\n                labels.append(fold)\n        return filepaths, labels\n  \n    def dataFrame(self, files, labels):\n\n        Fseries = pd.Series(files, name='filepaths')\n        Lseries = pd.Series(labels, name='labels')\n        return pd.concat([Fseries, Lseries], axis=1)\n   \n    def split_(self):\n        files, labels = self.dataPaths()\n        df = self.dataFrame(files, labels)\n        strat = df['labels']\n        trainData, dummyData = train_test_split(df, train_size=0.8, shuffle=True, random_state=42, stratify=strat)\n        strat = dummyData['labels']\n        validData, testData = train_test_split(dummyData, train_size=0.5, shuffle=True, random_state=42, stratify=strat)\n        return trainData, validData, testData","metadata":{"execution":{"iopub.status.busy":"2024-02-15T13:34:00.720765Z","iopub.execute_input":"2024-02-15T13:34:00.72128Z","iopub.status.idle":"2024-02-15T13:34:00.730846Z","shell.execute_reply.started":"2024-02-15T13:34:00.721254Z","shell.execute_reply":"2024-02-15T13:34:00.729835Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dataDir='/kaggle/input/eye-diseases-classification/dataset'","metadata":{"execution":{"iopub.status.busy":"2024-02-15T13:34:00.732118Z","iopub.execute_input":"2024-02-15T13:34:00.732454Z","iopub.status.idle":"2024-02-15T13:34:00.771897Z","shell.execute_reply.started":"2024-02-15T13:34:00.732422Z","shell.execute_reply":"2024-02-15T13:34:00.771077Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dataSplit = EyeDiseaseDataset(dataDir)\ntrain_data, valid_data, test_data = dataSplit.split_()","metadata":{"execution":{"iopub.status.busy":"2024-02-15T13:34:00.773844Z","iopub.execute_input":"2024-02-15T13:34:00.774745Z","iopub.status.idle":"2024-02-15T13:34:01.361215Z","shell.execute_reply.started":"2024-02-15T13:34:00.774707Z","shell.execute_reply":"2024-02-15T13:34:01.360459Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def display_random_image(df):\n    random_row = df.sample(1).iloc[0]\n    filepath = random_row['filepaths']\n    label = random_row['labels']\n    \n    img = Image.open(filepath)\n    plt.imshow(img)\n    plt.title(f'Label:{label}')\n    plt.axis('off')\n    plt.show()\n\ndisplay_random_image(train_data)","metadata":{"execution":{"iopub.status.busy":"2024-02-15T13:34:01.362183Z","iopub.execute_input":"2024-02-15T13:34:01.362425Z","iopub.status.idle":"2024-02-15T13:34:01.547133Z","shell.execute_reply.started":"2024-02-15T13:34:01.362403Z","shell.execute_reply":"2024-02-15T13:34:01.546197Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Function for Data Augmentation","metadata":{}},{"cell_type":"code","source":"def augment_data( train_df, valid_df, test_df, batch_size=16):\n\n    img_size = (256,256)\n    channels = 3\n    color = 'rgb'\n    \n\n    train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n              rotation_range=30,\n              horizontal_flip=True,\n              vertical_flip=True,\n              brightness_range=[0.5, 1.5])\n          \n    valid_test_datagen = tf.keras.preprocessing.image.ImageDataGenerator()\n          \n    train_generator = train_datagen.flow_from_dataframe(\n              train_df,\n              x_col='filepaths',\n              y_col='labels',\n              target_size=img_size,\n              color_mode=color,\n              batch_size=batch_size,\n              shuffle=True,\n              class_mode='categorical'\n          )\n   \n    print(\"Shape of augmented training images:\", train_generator.image_shape)\n          \n    valid_generator = valid_test_datagen.flow_from_dataframe(\n              valid_df,\n              x_col='filepaths',\n              y_col='labels',\n              target_size=img_size,\n              color_mode=color,\n              batch_size=batch_size,\n              shuffle=True,\n              class_mode='categorical'\n          )\n         \n    print(\"Shape of validation images:\", valid_generator.image_shape)\n          \n    test_generator = valid_test_datagen.flow_from_dataframe(\n              test_df,\n              x_col='filepaths',\n              y_col='labels',\n              target_size=img_size,\n              color_mode=color,\n              batch_size=batch_size,\n              shuffle=False,\n              class_mode='categorical'\n          )\n          \n    print(\"Shape of test images:\", test_generator.image_shape)\n          \n    return train_generator, valid_generator, test_generator","metadata":{"execution":{"iopub.status.busy":"2024-02-15T13:34:01.548334Z","iopub.execute_input":"2024-02-15T13:34:01.548627Z","iopub.status.idle":"2024-02-15T13:34:01.557822Z","shell.execute_reply.started":"2024-02-15T13:34:01.548602Z","shell.execute_reply":"2024-02-15T13:34:01.556847Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_augmented, valid_augmented, test_augmented = augment_data(train_data, valid_data, test_data)","metadata":{"execution":{"iopub.status.busy":"2024-02-15T13:34:01.559043Z","iopub.execute_input":"2024-02-15T13:34:01.559316Z","iopub.status.idle":"2024-02-15T13:34:02.665956Z","shell.execute_reply.started":"2024-02-15T13:34:01.559293Z","shell.execute_reply":"2024-02-15T13:34:02.66507Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def show_images(gen):\n      \n    g_dict = gen.class_indices        # defines dictionary {'class': index}\n    classes = list(g_dict.keys())     # defines list of dictionary's kays (classes), classes names : string\n    images, labels = next(gen)        # get a batch size samples from the generator\n    length = len(labels)       \n    sample = min(length, 20)   \n    plt.figure(figsize= (15, 17))\n    for i in range(sample):\n        plt.subplot(5, 5, i + 1)\n        image = images[i] / 255      \n        plt.imshow(image)\n        index = np.argmax(labels[i])  \n        class_name = classes[index]  \n        plt.title(class_name, color= 'blue', fontsize= 7 )\n        plt.axis('off')\n    plt.show()\nshow_images(train_augmented)","metadata":{"execution":{"iopub.status.busy":"2024-02-15T13:34:02.667109Z","iopub.execute_input":"2024-02-15T13:34:02.667403Z","iopub.status.idle":"2024-02-15T13:34:04.661671Z","shell.execute_reply.started":"2024-02-15T13:34:02.667377Z","shell.execute_reply":"2024-02-15T13:34:04.660684Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Download and compile the model","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.applications import EfficientNetB3\nfrom tensorflow.keras import regularizers\n\nclasses = len(list(train_augmented.class_indices.keys()))\n\nbase_model = EfficientNetB3(weights='imagenet', include_top=False, input_shape=(256, 256, 3))\n\nfor layer in base_model.layers:\n    layer.trainable = False\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(512, activation='relu' , kernel_regularizer = regularizers.l2(0.01))(x)\n\npredictions = Dense(classes, activation='softmax', kernel_regularizer = regularizers.l2(0.01))(x)\n\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\noptimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\n\nmodel.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-02-15T14:11:40.97861Z","iopub.execute_input":"2024-02-15T14:11:40.978979Z","iopub.status.idle":"2024-02-15T14:11:44.249089Z","shell.execute_reply.started":"2024-02-15T14:11:40.978952Z","shell.execute_reply":"2024-02-15T14:11:44.248046Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Fit the model","metadata":{}},{"cell_type":"code","source":"history = model.fit(\n    train_augmented,\n    epochs=15, \n    validation_data=valid_augmented,\n    )","metadata":{"execution":{"iopub.status.busy":"2024-02-15T14:11:48.965879Z","iopub.execute_input":"2024-02-15T14:11:48.966236Z","iopub.status.idle":"2024-02-15T14:29:55.564307Z","shell.execute_reply.started":"2024-02-15T14:11:48.966205Z","shell.execute_reply":"2024-02-15T14:29:55.563532Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Plot the Accuracy and Loss","metadata":{}},{"cell_type":"code","source":"train_accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nprint(\"Training Accuracy:\", train_accuracy[-1])\nprint(\"Validation Accuracy:\", val_accuracy[-1])\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-15T14:30:13.959711Z","iopub.execute_input":"2024-02-15T14:30:13.960074Z","iopub.status.idle":"2024-02-15T14:30:14.348109Z","shell.execute_reply.started":"2024-02-15T14:30:13.960043Z","shell.execute_reply":"2024-02-15T14:30:14.347294Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Display the Actual and Predicted images","metadata":{}},{"cell_type":"code","source":"def plot_actual_vs_predicted(model, test_data, num_samples=3):\n    \n    # Get a batch of test data\n    test_images, test_labels = next(iter(test_data))\n\n    predictions = model.predict(test_images)\n\n    class_labels = list(train_augmented.class_indices.keys())\n\n    sample_indices = np.random.choice(range(len(test_images)), num_samples, replace=False)\n      # Plot the images with actual and predicted labels\n    for i in sample_indices:\n        actual_label = class_labels[np.argmax(test_labels[i])]\n        predicted_label = class_labels[np.argmax(predictions[i])]\n        plt.figure(figsize=(8, 4))\n        # Actual Image\n        plt.subplot(1, 2, 1)\n        plt.imshow(test_images[i].astype(np.uint8))  \n        plt.title(f'Actual: {actual_label}')\n        plt.axis('off')\n        # Predicted Image\n        plt.subplot(1, 2, 2)\n        plt.imshow(test_images[i].astype(np.uint8))  \n        plt.title(f'Predicted: {predicted_label}')\n        plt.axis('off')\n        plt.show()\nplot_actual_vs_predicted(model, test_augmented)","metadata":{"execution":{"iopub.status.busy":"2024-02-15T14:30:36.607556Z","iopub.execute_input":"2024-02-15T14:30:36.608379Z","iopub.status.idle":"2024-02-15T14:30:40.030396Z","shell.execute_reply.started":"2024-02-15T14:30:36.608336Z","shell.execute_reply":"2024-02-15T14:30:40.029483Z"},"trusted":true},"execution_count":null,"outputs":[]}]}