{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9440955,"sourceType":"datasetVersion","datasetId":5737164}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","scrolled":true,"execution":{"iopub.status.busy":"2024-09-21T15:01:40.51375Z","iopub.execute_input":"2024-09-21T15:01:40.514137Z","iopub.status.idle":"2024-09-21T15:02:40.939668Z","shell.execute_reply.started":"2024-09-21T15:01:40.514097Z","shell.execute_reply":"2024-09-21T15:02:40.936534Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# importing libraries\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.applications import ResNet101\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom tensorflow.keras.models import Sequential\nimport numpy as np\nfrom glob import glob\nfrom sklearn.metrics import roc_curve, auc, confusion_matrix, classification_report\nfrom sklearn.preprocessing import label_binarize\nfrom itertools import cycle\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-09-21T22:09:28.659393Z","iopub.execute_input":"2024-09-21T22:09:28.660266Z","iopub.status.idle":"2024-09-21T22:09:30.089343Z","shell.execute_reply.started":"2024-09-21T22:09:28.660227Z","shell.execute_reply":"2024-09-21T22:09:30.088515Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport shutil\nfrom sklearn.model_selection import train_test_split\n\n# Define paths\nbase_dir = '/kaggle/input/retinal-oct'\ntrain_dir = 'train_set'\ntest_dir = 'test_set'\n\n# Create directories for train and test sets if they don't exist\nos.makedirs(train_dir, exist_ok=True)\nos.makedirs(test_dir, exist_ok=True)\n\n# Get the list of classes (sub-folders)\nclasses = [d for d in os.listdir(base_dir) if os.path.isdir(os.path.join(base_dir, d))]\n\n# Loop through each class\nfor cls in classes:\n    class_path = os.path.join(base_dir, cls)\n    images = [f for f in os.listdir(class_path) if os.path.isfile(os.path.join(class_path, f))]\n    \n    # Split the images into train and test sets\n    train_images, test_images = train_test_split(images, test_size=0.1, random_state=42)\n    \n    # Create class directories in the train and test folders\n    os.makedirs(os.path.join(train_dir, cls), exist_ok=True)\n    os.makedirs(os.path.join(test_dir, cls), exist_ok=True)\n    \n    # Copy training images\n    for img in train_images:\n        src = os.path.join(class_path, img)\n        dst = os.path.join(train_dir, cls, img)\n        shutil.copyfile(src, dst)\n    \n    # Copy testing images\n    for img in test_images:\n        src = os.path.join(class_path, img)\n        dst = os.path.join(test_dir, cls, img)\n        shutil.copyfile(src, dst)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T15:02:45.80848Z","iopub.execute_input":"2024-09-21T15:02:45.808834Z","iopub.status.idle":"2024-09-21T15:04:34.43941Z","shell.execute_reply.started":"2024-09-21T15:02:45.808783Z","shell.execute_reply":"2024-09-21T15:04:34.438336Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_set =  \"/kaggle/working/train_set\"\ntest_set_directory = '/kaggle/working/test_set'","metadata":{"execution":{"iopub.status.busy":"2024-09-21T15:04:34.443142Z","iopub.execute_input":"2024-09-21T15:04:34.443474Z","iopub.status.idle":"2024-09-21T15:04:34.448048Z","shell.execute_reply.started":"2024-09-21T15:04:34.443424Z","shell.execute_reply":"2024-09-21T15:04:34.447103Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\n\nSIZE_X = SIZE_Y = 150\n\n# Load datasets (assuming you've already done this)\ntrain_set = image_dataset_from_directory(\n    image_set,\n    image_size=(SIZE_X, SIZE_Y),\n    color_mode=\"rgb\",\n    batch_size=128,\n    shuffle=True,\n    validation_split=0.2,\n    subset='training',\n    seed=42\n)\n\nvalidate_set = image_dataset_from_directory(\n    image_set,\n    image_size=(SIZE_X, SIZE_Y),\n    color_mode=\"rgb\",\n    batch_size=128,\n    shuffle=False,\n    validation_split=0.2,\n    subset='validation',\n    seed=42\n)\n\ntest_set = image_dataset_from_directory(\n    test_set_directory,\n    image_size=(SIZE_X, SIZE_Y),\n    color_mode='rgb',\n    batch_size=128,\n    shuffle=False\n)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T15:04:34.45199Z","iopub.execute_input":"2024-09-21T15:04:34.452272Z","iopub.status.idle":"2024-09-21T15:04:45.74696Z","shell.execute_reply.started":"2024-09-21T15:04:34.452241Z","shell.execute_reply":"2024-09-21T15:04:45.745992Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"IMAGE_SIZE = [150, 150]","metadata":{"execution":{"iopub.status.busy":"2024-09-21T22:09:41.864552Z","iopub.execute_input":"2024-09-21T22:09:41.865448Z","iopub.status.idle":"2024-09-21T22:09:41.869926Z","shell.execute_reply.started":"2024-09-21T22:09:41.865407Z","shell.execute_reply":"2024-09-21T22:09:41.868837Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score","metadata":{"execution":{"iopub.status.busy":"2024-09-21T15:04:45.755274Z","iopub.execute_input":"2024-09-21T15:04:45.755676Z","iopub.status.idle":"2024-09-21T15:04:45.770756Z","shell.execute_reply.started":"2024-09-21T15:04:45.75563Z","shell.execute_reply":"2024-09-21T15:04:45.769659Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to plot accuracy curve\ndef accuracy_curve(history):\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.title('Model Accuracy')\n    plt.ylabel('Accuracy')\n    plt.xlabel('Epoch')\n    plt.legend(['Train', 'Validation'], loc='upper left')\n    plt.show()\n\n# Function to plot loss curve\ndef loss_curve(history):\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('Model Loss')\n    plt.ylabel('Loss')\n    plt.xlabel('Epoch')\n    plt.legend(['Train', 'Validation'], loc='upper left')\n    plt.show()\n\n# Function to generate confusion matrix and classification report\ndef reports(model, test_set, n_classes):\n    # Extract true labels\n    y_true = np.concatenate([y for x, y in test_set], axis=0)\n\n    # Predict class labels\n    y_pred = model.predict(test_set)\n    y_pred_classes = np.argmax(y_pred, axis=1)\n\n    # Confusion Matrix\n    conf_matrix = confusion_matrix(y_true, y_pred_classes)\n\n    # Plot confusion matrix\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap='Blues', xticklabels=[str(i) for i in range(n_classes)], yticklabels=[str(i) for i in range(n_classes)])\n    plt.xlabel('Predicted Class')\n    plt.ylabel('True Class')\n    plt.title('Confusion Matrix')\n    plt.show()\n\n    # Classification Report\n    class_report = classification_report(y_true, y_pred_classes, target_names=[str(i) for i in range(n_classes)])\n    print(\"Classification Report:\")\n    print(class_report)\n\n# Function to plot ROC curve for each class\ndef plot_roc_curve(y_true, y_pred, n_classes):\n    fpr = {}\n    tpr = {}\n    roc_auc = {}\n\n    # One-hot encode the true labels\n    y_true_onehot = np.eye(n_classes)[y_true]\n\n    for i in range(n_classes):\n        fpr[i], tpr[i], _ = roc_curve(y_true_onehot[:, i], y_pred[:, i])\n        roc_auc[i] = auc(fpr[i], tpr[i])\n\n    # Plot ROC curve for each class\n    plt.figure()\n    for i in range(n_classes):\n        plt.plot(fpr[i], tpr[i], label=f'Class {i} (area = {roc_auc[i]:.2f})')\n\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.title('ROC Curve for each class')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.legend(loc=\"lower right\")\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-21T15:04:45.772384Z","iopub.execute_input":"2024-09-21T15:04:45.772802Z","iopub.status.idle":"2024-09-21T15:04:45.794163Z","shell.execute_reply.started":"2024-09-21T15:04:45.772757Z","shell.execute_reply":"2024-09-21T15:04:45.793072Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# ResNet50 Teacher","metadata":{}},{"cell_type":"code","source":"resnet = ResNet50(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)\n\nfor layer in resnet.layers:\n    layer.trainable = False\nflatten = Flatten()(resnet.output)\ndense = Dense(256, activation = 'relu')(flatten)\ndense = Dense(128, activation = 'relu')(dense)\nprediction = Dense(4, activation = 'softmax')(dense)\n\n#creating a model\nmodel = Model(inputs = resnet.input, outputs = prediction )\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-21T22:10:13.147574Z","iopub.execute_input":"2024-09-21T22:10:13.148438Z","iopub.status.idle":"2024-09-21T22:10:16.160174Z","shell.execute_reply.started":"2024-09-21T22:10:13.148315Z","shell.execute_reply":"2024-09-21T22:10:16.15925Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history = model.fit(\n    train_set,\n    validation_data=validate_set,\n    epochs=15\n)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T15:04:47.798639Z","iopub.execute_input":"2024-09-21T15:04:47.798953Z","iopub.status.idle":"2024-09-21T15:21:57.961401Z","shell.execute_reply.started":"2024-09-21T15:04:47.798919Z","shell.execute_reply":"2024-09-21T15:21:57.960517Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model\nresult = model.evaluate(test_set, batch_size=128)\nprint(\"Test Loss, Test Accuracy:\", result)\n\naccuracy_curve(history)\nloss_curve(history)\n\ny_true = np.concatenate([y for x, y in test_set], axis=0)\ny_pred = model.predict(test_set)\ny_pred_classes = np.argmax(y_pred, axis=1)\n\n\nreports(model, test_set, n_classes=4)\nplot_roc_curve(y_true, y_pred, n_classes=4)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T15:21:57.96297Z","iopub.execute_input":"2024-09-21T15:21:57.96329Z","iopub.status.idle":"2024-09-21T15:22:40.858194Z","shell.execute_reply.started":"2024-09-21T15:21:57.963256Z","shell.execute_reply":"2024-09-21T15:22:40.857283Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# ResNet101","metadata":{}},{"cell_type":"code","source":"from keras.applications import ResNet101\n\nresnet101 = ResNet101(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)\n\nfor layer in resnet101.layers:\n    layer.trainable = False\n\nflatten = Flatten()(resnet101.output)\ndense = Dense(256, activation='relu')(flatten)\ndense = Dense(128, activation='relu')(dense)\nprediction = Dense(4, activation='softmax')(dense)\n\nmodel_resnet101 = Model(inputs=resnet101.input, outputs=prediction)\n\nmodel_resnet101.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel_resnet101.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-21T22:10:50.34064Z","iopub.execute_input":"2024-09-21T22:10:50.341062Z","iopub.status.idle":"2024-09-21T22:10:54.240056Z","shell.execute_reply.started":"2024-09-21T22:10:50.341022Z","shell.execute_reply":"2024-09-21T22:10:54.239103Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history_resnet101 = model_resnet101.fit(train_set, validation_data=validate_set, epochs=15)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T15:22:43.750191Z","iopub.execute_input":"2024-09-21T15:22:43.75053Z","iopub.status.idle":"2024-09-21T15:49:16.630737Z","shell.execute_reply.started":"2024-09-21T15:22:43.750488Z","shell.execute_reply":"2024-09-21T15:49:16.629705Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model\nresult_resnet101 = model_resnet101.evaluate(test_set, batch_size=128)\nprint(\"ResNet101 Test Loss, Test Accuracy:\", result_resnet101)\n\naccuracy_curve(history_resnet101)\nloss_curve(history_resnet101)\n\ny_true = np.concatenate([y for x, y in test_set], axis=0)\ny_pred = model_resnet101.predict(test_set)\ny_pred_classes = np.argmax(y_pred, axis=1)\n\nreports(model_resnet101, test_set, n_classes=4)\nplot_roc_curve(y_true, y_pred, n_classes=4)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T15:49:16.632206Z","iopub.execute_input":"2024-09-21T15:49:16.632569Z","iopub.status.idle":"2024-09-21T15:50:12.526201Z","shell.execute_reply.started":"2024-09-21T15:49:16.632526Z","shell.execute_reply":"2024-09-21T15:50:12.525212Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# EfficientNetB0","metadata":{}},{"cell_type":"code","source":"from keras.applications import EfficientNetB0\n\nefficientnetb0 = EfficientNetB0(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)\n\nfor layer in efficientnetb0.layers:\n    layer.trainable = False\n\nflatten = Flatten()(efficientnetb0.output)\ndense = Dense(256, activation='relu')(flatten)\ndense = Dense(128, activation='relu')(dense)\nprediction = Dense(4, activation='softmax')(dense)\n\nmodel_efficientnetb0 = Model(inputs=efficientnetb0.input, outputs=prediction)\n\nmodel_efficientnetb0.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel_resnet101.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-21T22:12:18.777987Z","iopub.execute_input":"2024-09-21T22:12:18.778444Z","iopub.status.idle":"2024-09-21T22:12:21.097191Z","shell.execute_reply.started":"2024-09-21T22:12:18.778404Z","shell.execute_reply":"2024-09-21T22:12:21.096078Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history_efficientnetb0 = model_efficientnetb0.fit(train_set, validation_data=validate_set, epochs=15)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T15:50:14.72753Z","iopub.execute_input":"2024-09-21T15:50:14.72793Z","iopub.status.idle":"2024-09-21T16:06:56.23679Z","shell.execute_reply.started":"2024-09-21T15:50:14.727885Z","shell.execute_reply":"2024-09-21T16:06:56.235855Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model\nresult_efficientnetb0 = model_efficientnetb0.evaluate(test_set, batch_size=128)\nprint(\"EfficientNetB0 Test Loss, Test Accuracy:\", result_efficientnetb0)\n\naccuracy_curve(history_efficientnetb0)\nloss_curve(history_efficientnetb0)\n\ny_true = np.concatenate([y for x, y in test_set], axis=0)\ny_pred = model_efficientnetb0.predict(test_set)\ny_pred_classes = np.argmax(y_pred, axis=1)\n\nreports(model_efficientnetb0, test_set, n_classes=4)\nplot_roc_curve(y_true, y_pred, n_classes=4)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T16:06:56.238343Z","iopub.execute_input":"2024-09-21T16:06:56.238752Z","iopub.status.idle":"2024-09-21T16:07:43.061685Z","shell.execute_reply.started":"2024-09-21T16:06:56.238717Z","shell.execute_reply":"2024-09-21T16:07:43.060769Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# EfficientNetB3","metadata":{}},{"cell_type":"code","source":"from keras.applications import EfficientNetB3\n\nefficientnetb3 = EfficientNetB3(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)\n\nfor layer in efficientnetb3.layers:\n    layer.trainable = False\n\nflatten = Flatten()(efficientnetb3.output)\ndense = Dense(256, activation='relu')(flatten)\ndense = Dense(128, activation='relu')(dense)\nprediction = Dense(4, activation='softmax')(dense)\n\nmodel_efficientnetb3 = Model(inputs=efficientnetb3.input, outputs=prediction)\n\nmodel_efficientnetb3.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel_efficientnetb3.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-21T22:13:07.249581Z","iopub.execute_input":"2024-09-21T22:13:07.249991Z","iopub.status.idle":"2024-09-21T22:13:10.345867Z","shell.execute_reply.started":"2024-09-21T22:13:07.249954Z","shell.execute_reply":"2024-09-21T22:13:10.345065Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history_efficientnetb3 = model_efficientnetb3.fit(train_set, validation_data=validate_set, epochs=15)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T16:07:45.874074Z","iopub.execute_input":"2024-09-21T16:07:45.874424Z","iopub.status.idle":"2024-09-21T16:26:05.175483Z","shell.execute_reply.started":"2024-09-21T16:07:45.874387Z","shell.execute_reply":"2024-09-21T16:26:05.174508Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model\nresult_efficientnetb3 = model_efficientnetb3.evaluate(test_set, batch_size=128)\nprint(\"EfficientNetB3 Test Loss, Test Accuracy:\", result_efficientnetb3)\n\naccuracy_curve(history_efficientnetb3)\nloss_curve(history_efficientnetb3)\n\ny_true = np.concatenate([y for x, y in test_set], axis=0)\ny_pred = model_efficientnetb3.predict(test_set)\ny_pred_classes = np.argmax(y_pred, axis=1)\n\nreports(model_efficientnetb3, test_set, n_classes=4)\nplot_roc_curve(y_true, y_pred, n_classes=4)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T16:26:05.177183Z","iopub.execute_input":"2024-09-21T16:26:05.177552Z","iopub.status.idle":"2024-09-21T16:26:58.05009Z","shell.execute_reply.started":"2024-09-21T16:26:05.17751Z","shell.execute_reply":"2024-09-21T16:26:58.049118Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# VGG16","metadata":{}},{"cell_type":"code","source":"from keras.applications import VGG16\n\nvgg16 = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)\n\nfor layer in vgg16.layers:\n    layer.trainable = False\n\nflatten = Flatten()(vgg16.output)\ndense = Dense(256, activation='relu')(flatten)\ndense = Dense(128, activation='relu')(dense)\nprediction = Dense(4, activation='softmax')(dense)\n\nmodel_vgg16 = Model(inputs=vgg16.input, outputs=prediction)\n\nmodel_vgg16.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel_vgg16.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-21T22:13:50.407033Z","iopub.execute_input":"2024-09-21T22:13:50.407917Z","iopub.status.idle":"2024-09-21T22:13:51.163305Z","shell.execute_reply.started":"2024-09-21T22:13:50.407876Z","shell.execute_reply":"2024-09-21T22:13:51.162414Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history_vgg16 = model_vgg16.fit(train_set, validation_data=validate_set, epochs=15)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T16:26:58.441958Z","iopub.execute_input":"2024-09-21T16:26:58.442243Z","iopub.status.idle":"2024-09-21T16:46:03.862265Z","shell.execute_reply.started":"2024-09-21T16:26:58.442213Z","shell.execute_reply":"2024-09-21T16:46:03.861271Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model\nresult_vgg16 = model_vgg16.evaluate(test_set, batch_size=128)\nprint(\"VGG16 Test Loss, Test Accuracy:\", result_vgg16)\n\naccuracy_curve(history_vgg16)\nloss_curve(history_vgg16)\n\ny_true = np.concatenate([y for x, y in test_set], axis=0)\ny_pred = model_vgg16.predict(test_set)\ny_pred_classes = np.argmax(y_pred, axis=1)\n\nreports(model_vgg16, test_set, n_classes=4)\nplot_roc_curve(y_true, y_pred, n_classes=4)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T16:46:03.864081Z","iopub.execute_input":"2024-09-21T16:46:03.864428Z","iopub.status.idle":"2024-09-21T16:46:47.152375Z","shell.execute_reply.started":"2024-09-21T16:46:03.86439Z","shell.execute_reply":"2024-09-21T16:46:47.151284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# VGG19","metadata":{}},{"cell_type":"code","source":"from keras.applications import VGG19\n\nvgg19 = VGG19(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)\n\nfor layer in vgg19.layers:\n    layer.trainable = False\n\nflatten = Flatten()(vgg19.output)\ndense = Dense(256, activation='relu')(flatten)\ndense = Dense(128, activation='relu')(dense)\nprediction = Dense(4, activation='softmax')(dense)\n\nmodel_vgg19 = Model(inputs=vgg19.input, outputs=prediction)\n\nmodel_vgg19.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel_vgg19.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-21T22:14:12.842222Z","iopub.execute_input":"2024-09-21T22:14:12.843214Z","iopub.status.idle":"2024-09-21T22:14:13.811182Z","shell.execute_reply.started":"2024-09-21T22:14:12.843172Z","shell.execute_reply":"2024-09-21T22:14:13.810385Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history_vgg19 = model_vgg19.fit(train_set, validation_data=validate_set, epochs=15)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T16:46:48.048408Z","iopub.execute_input":"2024-09-21T16:46:48.048813Z","iopub.status.idle":"2024-09-21T17:10:47.241511Z","shell.execute_reply.started":"2024-09-21T16:46:48.048769Z","shell.execute_reply":"2024-09-21T17:10:47.240515Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model\nresult_vgg19 = model_vgg19.evaluate(test_set, batch_size=128)\nprint(\"VGG19 Test Loss, Test Accuracy:\", result_vgg19)\n\naccuracy_curve(history_vgg19)\nloss_curve(history_vgg19)\n\ny_true = np.concatenate([y for x, y in test_set], axis=0)\ny_pred = model_vgg19.predict(test_set)\ny_pred_classes = np.argmax(y_pred, axis=1)\n\nreports(model_vgg19, test_set, n_classes=4)\nplot_roc_curve(y_true, y_pred, n_classes=4)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T17:10:47.242888Z","iopub.execute_input":"2024-09-21T17:10:47.243278Z","iopub.status.idle":"2024-09-21T17:11:40.527286Z","shell.execute_reply.started":"2024-09-21T17:10:47.243237Z","shell.execute_reply":"2024-09-21T17:11:40.526179Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# MobileNetV2","metadata":{}},{"cell_type":"code","source":"from keras.applications import MobileNetV2\n\nmobilenetv2 = MobileNetV2(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)\n\nfor layer in mobilenetv2.layers:\n    layer.trainable = False\n\nflatten = Flatten()(mobilenetv2.output)\ndense = Dense(256, activation='relu')(flatten)\ndense = Dense(128, activation='relu')(dense)\nprediction = Dense(4, activation='softmax')(dense)\n\nmodel_mobilenetv2 = Model(inputs=mobilenetv2.input, outputs=prediction)\n\nmodel_mobilenetv2.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel_mobilenetv2.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-21T22:14:33.625272Z","iopub.execute_input":"2024-09-21T22:14:33.626183Z","iopub.status.idle":"2024-09-21T22:14:34.963295Z","shell.execute_reply.started":"2024-09-21T22:14:33.626141Z","shell.execute_reply":"2024-09-21T22:14:34.962474Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history_mobilenetv2 = model_mobilenetv2.fit(train_set, validation_data=validate_set, epochs=15)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T17:11:41.92687Z","iopub.execute_input":"2024-09-21T17:11:41.927156Z","iopub.status.idle":"2024-09-21T17:27:15.923078Z","shell.execute_reply.started":"2024-09-21T17:11:41.927125Z","shell.execute_reply":"2024-09-21T17:27:15.922128Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model\nresult_mobilenetv2 = model_mobilenetv2.evaluate(test_set, batch_size=128)\nprint(\"MobileNetV2 Test Loss, Test Accuracy:\", result_mobilenetv2)\n\naccuracy_curve(history_mobilenetv2)\nloss_curve(history_mobilenetv2)\n\ny_true = np.concatenate([y for x, y in test_set], axis=0)\ny_pred = model_mobilenetv2.predict(test_set)\ny_pred_classes = np.argmax(y_pred, axis=1)\n\nreports(model_mobilenetv2, test_set, n_classes=4)\nplot_roc_curve(y_true, y_pred, n_classes=4)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T17:27:15.924708Z","iopub.execute_input":"2024-09-21T17:27:15.925046Z","iopub.status.idle":"2024-09-21T17:27:55.167927Z","shell.execute_reply.started":"2024-09-21T17:27:15.924999Z","shell.execute_reply":"2024-09-21T17:27:55.166933Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# InceptionV3","metadata":{}},{"cell_type":"code","source":"from keras.applications import InceptionV3\n\ninceptionv3 = InceptionV3(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)\n\nfor layer in inceptionv3.layers:\n    layer.trainable = False\n\nflatten = Flatten()(inceptionv3.output)\ndense = Dense(256, activation='relu')(flatten)\ndense = Dense(128, activation='relu')(dense)\nprediction = Dense(4, activation='softmax')(dense)\n\nmodel_inceptionv3 = Model(inputs=inceptionv3.input, outputs=prediction)\n\nmodel_inceptionv3.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel_inceptionv3.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-21T22:14:56.992225Z","iopub.execute_input":"2024-09-21T22:14:56.992644Z","iopub.status.idle":"2024-09-21T22:14:59.74514Z","shell.execute_reply.started":"2024-09-21T22:14:56.992605Z","shell.execute_reply":"2024-09-21T22:14:59.744209Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history_inceptionv3 = model_inceptionv3.fit(train_set, validation_data=validate_set, epochs=15)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T17:27:57.978692Z","iopub.execute_input":"2024-09-21T17:27:57.979052Z","iopub.status.idle":"2024-09-21T17:44:00.782653Z","shell.execute_reply.started":"2024-09-21T17:27:57.979013Z","shell.execute_reply":"2024-09-21T17:44:00.781646Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model\nresult_inceptionv3 = model_inceptionv3.evaluate(test_set, batch_size=128)\nprint(\"InceptionV3 Test Loss, Test Accuracy:\", result_inceptionv3)\n\naccuracy_curve(history_inceptionv3)\nloss_curve(history_inceptionv3)\n\ny_true = np.concatenate([y for x, y in test_set], axis=0)\ny_pred = model_inceptionv3.predict(test_set)\ny_pred_classes = np.argmax(y_pred, axis=1)\n\nreports(model_inceptionv3, test_set, n_classes=4)\nplot_roc_curve(y_true, y_pred, n_classes=4)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T17:44:00.78419Z","iopub.execute_input":"2024-09-21T17:44:00.784616Z","iopub.status.idle":"2024-09-21T17:44:48.514736Z","shell.execute_reply.started":"2024-09-21T17:44:00.784569Z","shell.execute_reply":"2024-09-21T17:44:48.513808Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Summary","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\n# Updated data with new accuracies\nupdated_data = {\n    'Model': ['Resnet50', 'Resnet101', 'EfficientNetB0', 'EfficientNetB3', 'VGG16', 'VGG19', 'MobileNetV2', 'InceptionV3'],\n    'Accuracy': [0.89, 0.84, 0.91, 0.91, 0.89, 0.88, 0.68, 0.68]\n}\n\n# Creating the dataframe\ndf_updated = pd.DataFrame(updated_data)\ndf_updated","metadata":{"execution":{"iopub.status.busy":"2024-09-21T22:22:15.781588Z","iopub.execute_input":"2024-09-21T22:22:15.782551Z","iopub.status.idle":"2024-09-21T22:22:15.805975Z","shell.execute_reply.started":"2024-09-21T22:22:15.78251Z","shell.execute_reply":"2024-09-21T22:22:15.805118Z"},"trusted":true},"execution_count":null,"outputs":[]}]}